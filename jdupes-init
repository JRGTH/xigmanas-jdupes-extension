#!/bin/sh
# jdupes-init
# A simple Jdupes add-on for XigmaNAS Embedded x64 11.x and later.
# License: BSD2CLAUSE (BSD 2-clause Simplified License).
# Debug script
#set -x

# Copyright (c) 2020 JosÃ© Rivera (JoseMR)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS 'AS IS' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Set environment.
PATH=${PATH}:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

# Determine full working directory.
CWDIR=$(dirname $(realpath $0))

# Global variables.
PLATFORM=$(uname -m)
PRODUCT=$(uname -i)
PRDVERSION=$(uname -r | cut -d '-' -f1 | tr -d '.')
PRDPLATFORM=$(cat /etc/platform)
SCRIPTNAME=$(basename $0)
CONFIG="/cf/conf/config.xml"
APPNAME="jdupes"
EXTLOGFILE="${CWDIR}/log/${APPNAME}_ext.log"
FULLAPPNAME="${APPNAME}-addon"
PKGCONF="/etc/pkg/FreeBSD.conf"
USRLOCAL="/usr/local"
APPPATH="${USRLOCAL}/bin"
INSTALLPATH="${CWDIR}/${FULLAPPNAME}"
BRANCH="master"
GITURL="https://github.com/JRGTH/xigmanas-${APPNAME}-extension/archive/${BRANCH}.zip"
VERFILE="https://raw.githubusercontent.com/JRGTH/xigmanas-${APPNAME}-extension/${BRANCH}/version"

error_notify()
{
	# Log/notify message on error and exit.
	MSG="$*"
	logger -t "${SCRIPTNAME}" "${MSG}"
	echo -e "$*" >&2; exit 1
}

runtime_config()
{
	# Create required directories if missing.
	if [ ! -d "${CWDIR}/conf" ]; then
		mkdir -p ${CWDIR}/conf
	fi
	if [ ! -d "${CWDIR}/log" ]; then
		mkdir -p ${CWDIR}/log
	fi
}

update_freebsdconf()
{
	# Update FreeBSD.conf to fetch latest packages.
	if [ -f "${PKGCONF}" ]; then 
		if grep -q "quarterly" ${PKGCONF}; then
			sed -i '' -E "s/quarterly/latest/g" ${PKGCONF} || \
			error_notify "Error: A problem has occurred while updating FreeBSD.conf file."
		fi
	fi
}

jdupes_native_download()
{
	# Install latest ksh9x package.
	if ! pkg info | grep -q ${APPNAME}; then
		# Check if ksh9x already exist.
		if [ ! -f "${APPPATH}/${APPNAME}" ]; then
			update_freebsdconf
			pkg install -y ${APPNAME} || error_notify "Error: A problem has occurred while fetching ${APPNAME}."
		fi
	fi
}

jdupes_initial_download()
{
	# Check if ksh9x already exist.
	if [ ! -f "${CWDIR}/${FULLAPPNAME}/${APPPATH}/${APPNAME}" ]; then
		# Fetch ksh9x package.
		update_freebsdconf
		pkg fetch -y -o ${CWDIR}/download ${APPNAME} || \
		error_notify "Error: A problem has occurred while fetching ${APPNAME}."
		jdupes_pkg_extract
	fi
}

jdupes_pkg_extract()
{
	# Extract fetched package for Embedded platform.
	if [ ! -f "${CWDIR}/${FULLAPPNAME}/${APPNAME}/+MANIFEST" ]; then
		echo "Extracting ${APPNAME}..."
		tar -Jxf ${CWDIR}/download/All/${APPNAME}-*.txz -C ${CWDIR}/${FULLAPPNAME}/ || \
		error_notify "Error: A problem has occurred while extractig ${APPNAME} files."
		mkdir -p ${CWDIR}/${FULLAPPNAME}/${APPNAME}
		mv ${CWDIR}/${FULLAPPNAME}/+* ${CWDIR}/${FULLAPPNAME}/${APPNAME}
		rm ${CWDIR}/download/All/${APPNAME}-*.txz
		echo "Done!"
	fi
}

ext_initial_download()
{
	# Always ensure the version file is present, otherwise update the extension files on startup.
	if [ ! -f "${CWDIR}/version" ]; then
		echo "Fetching and extracting extension files..."
		mkdir -p ${CWDIR}/update
		fetch -ao ${CWDIR}/update --no-verify-peer --timeout=30 ${GITURL} || \
		error_notify "Error: A problem has occurred while fetching extension package."
		tar -xf ${CWDIR}/update/${BRANCH}.zip --exclude='.git*' --strip-components 1 -C ${CWDIR}/update
		chmod +x ${CWDIR}/update/${SCRIPTNAME}
		cp -Rf ${CWDIR}/update/* ${CWDIR}/
		rm -R ${CWDIR}/update
		echo "Done!"
	fi
}

extension_upgrade()
{
	# Perform an online extension upgrade.
	DATE=$(date +"%a %b %d %T %Y")
	echo "Looking for new extension package!"
	mkdir -p ${CWDIR}/update
	fetch -ao ${CWDIR}/update --no-verify-peer --timeout=30 ${VERFILE} || \
	error_notify "Error: A problem has occurred while fetching version file."

	# Compare version files and fetch latest package if available.
	if [ -f "${CWDIR}/update/version" ]; then
		UPDATEVER=$(cat ${CWDIR}/update/version | tr -d .)
		CURRENTVER=$(cat ${CWDIR}/version | tr -d .)
		if [ "${UPDATEVER}" -gt "${CURRENTVER}" ]; then
			echo "New ${FULLAPPNAME} package found, performing upgrade..."
			fetch -ao ${CWDIR}/update --no-verify-peer --timeout=30 ${GITURL} || \
			error_notify "Error: A problem has occurred while fetching extension package."
			tar -xf ${CWDIR}/update/${BRANCH}.zip --exclude='.git*' --strip-components 1 -C ${CWDIR}/update
			chmod +x ${CWDIR}/update/${SCRIPTNAME}
			rm -f ${CWDIR}/update/${BRANCH}.zip
			cp -Rf ${CWDIR}/update/* ${CWDIR}/
			rm -R ${CWDIR}/update

			# Logging the update event.
			UPDATEVERSION=$(cat ${CWDIR}/version)
			echo "${DATE}: extension upgraded to ${UPDATEVERSION}" >> ${EXTLOGFILE}
			echo "Extension package upgrade completed!"
		else
			echo "Extension package is on the latest version!"
			rm -R ${CWDIR}/update
		fi
	fi
}

product_check()
{
	# Check for the working product.
	if [ "${PRODUCT}" = "NAS4FREE-x64" ] || [ "${PRODUCT}" = "XIGMANAS-x64" ]; then
		postinit_cmd
	fi
}

create_addon_env()
{
	# Create required directories.
	if [ ! -d "${CWDIR}/download/All" ]; then
		mkdir -p ${CWDIR}/download/All
	fi
	if [ ! -d "${CWDIR}/log" ]; then
		mkdir -p ${CWDIR}/log
	fi
	if [ ! -d "${CWDIR}/${FULLAPPNAME}" ]; then
		mkdir -p ${CWDIR}/${FULLAPPNAME}
	fi

	# Link jdupes-init to /usr/local/sbin.
	if [ ! -f "${USRLOCAL}/sbin/${SCRIPTNAME}" ]; then
		ln -fs ${CWDIR}/${SCRIPTNAME} ${USRLOCAL}/sbin/${SCRIPTNAME}
	fi
}

platform_check()
{
	# Check for working platform.
	if [ "${PRDPLATFORM}" = "x64-embedded" ]; then
		create_addon_env
		#ext_initial_download
		jdupes_initial_download
		sys_symlinkdir
	elif [ "${PRDPLATFORM}" = "x64-full" ]; then
		create_addon_env
		#ext_initial_download
		jdupes_native_download
		bin_symlinks
	fi
}

bin_symlinks()
{
	# Main jdupes symlinks.
	if [ -d "${INSTALLPATH}/${USRLOCAL}/bin" ]; then
		cd ${INSTALLPATH}/${USRLOCAL}/bin
		for file in *
			do
				ln -Ffhs ${INSTALLPATH}/${USRLOCAL}/bin/${file} ${USRLOCAL}/bin/${file}
		done
	fi
}

sys_symlinkdir()
{
	# Check and create/relink required symlinks/dirs for jdupes.
	# This environment will be checked each time the script is started for consistency.

	# Required directories for ksh9x.
	if [ ! -d "${USRLOCAL}/share/examples" ]; then
		mkdir -p ${USRLOCAL}/share/examples
	fi
	if [ ! -d "${USRLOCAL}/man/man1" ]; then
		mkdir -p ${USRLOCAL}/man/man1
	fi
	if [ ! -d "${USRLOCAL}/share/licenses" ]; then
		mkdir -p ${USRLOCAL}/share/licenses
	fi

	bin_symlinks

	# Required symlinks for ksh9x. 
	if [ -d "${INSTALLPATH}/${USRLOCAL}/man/man1" ]; then
		cd ${INSTALLPATH}/${USRLOCAL}/man/man1
		for file in *
			do
				ln -Ffhs ${INSTALLPATH}/${USRLOCAL}/man/man1/${file} ${USRLOCAL}/man/man1/${file}
		done
	fi
	if [ -d "${INSTALLPATH}/${USRLOCAL}/share/examples" ]; then
		cd ${INSTALLPATH}/${USRLOCAL}/share/examples
		for file in *
			do
				ln -Ffhs ${INSTALLPATH}/${USRLOCAL}/share/examples/${file} ${USRLOCAL}/share/examples/${file}
		done
	fi
	if [ -d "${INSTALLPATH}/${USRLOCAL}/share/licenses" ]; then
		cd ${INSTALLPATH}/${USRLOCAL}/share/licenses
		for file in *
			do
				ln -Ffhs ${INSTALLPATH}/${USRLOCAL}/share/licenses/${file} ${USRLOCAL}/share/licenses/${file}
		done
	fi
}

postinit_cmd()
{
	# Check and generate temporary php script for postinit command.
	if ! grep -qw ${CWDIR}/${SCRIPTNAME} ${CONFIG}; then
		touch ${CWDIR}/postinit || error_notify "Error: A problem has occurred while creating the postinit file."
		chmod +x ${CWDIR}/postinit
		if [ ! "${PRDVERSION}" -ge "110" ]; then
			# Generate php script for NAS4Free 10.3 versions.
			cat << EOF > ${CWDIR}/postinit
<?php
require_once("config.inc");
require_once("functions.inc");
\$cmd = dirname(__FILE__)."/${SCRIPTNAME}";
	\$i =0;
	if ( is_array(\$config['rc']['postinit'] ) && is_array( \$config['rc']['postinit']['cmd'] ) ) {
		for (\$i; \$i < count(\$config['rc']['postinit']['cmd']);) {
			if (preg_match('/${SCRIPTNAME}/', \$config['rc']['postinit']['cmd'][\$i])) break; ++\$i; }
	}
	\$config['rc']['postinit']['cmd'][\$i] = \$config['cmd']."\$cmd";
	write_config();
?>
EOF
		else
			# Generate php script for NAS4Free/XigmaNAS 11.x versions.
			cat << EOF > ${CWDIR}/postinit
<?php
require_once("config.inc");
require_once("functions.inc");
\$cmd = dirname(__FILE__)."/${SCRIPTNAME}";
\$name = "Jdupes Extension";
\$comment = "Start ${APPNAME}";
\$rc = &array_make_branch(\$config,'rc','param'); 
if(false === array_search_ex(\$name,\$rc,'name')):
	\$rc_param = [];
	\$rc_param['uuid'] = uuid();
	\$rc_param['name'] = \$name;
	\$rc_param['value'] = \$cmd;
	\$rc_param['comment'] = \$comment;
	\$rc_param['typeid'] = '2';
	\$rc_param['enable'] = true;
	\$rc[] = \$rc_param;
	write_config();
endif;
unset(\$rc);
?>
EOF
		fi

		# Execute temporary php script.
		if [ "${OBI_INSTALL}" != "ON" ]; then
			echo "Creating postinit command..."
			php-cgi -f ${CWDIR}/postinit && rm ${CWDIR}/postinit || \
			error_notify "Error: A problem has occurred while executing postinit file."
			echo "Done!"
		fi
		sysrc -f ${CWDIR}${APPCONF} INSTALL_DIR=${CWDIR} >/dev/null 2>&1
	fi
}

pkg_upgrade()
{
	# Check for extension updates.
	extension_upgrade
}

reset_install()
{
	# Reset the extension environment.
	echo "Removing extension files..."
	if [ -d "${CWDIR}/conf" ]; then
		rm -rf ${CWDIR}/conf
	fi
	if [ -d "${CWDIR}/log" ]; then
		rm -rf ${CWDIR}/log
	fi
	if [ -d "${CWDIR}/${FULLAPPNAME}" ]; then
		rm -rf ${CWDIR}/${FULLAPPNAME}
	fi
	if [ -d "${CWDIR}/download" ]; then
		rm -rf ${CWDIR}/download
	fi
	if [ -f "${CWDIR}/version" ]; then
		rm -f ${CWDIR}/version
	fi
	runtime_config
}

remove_addon()
{
	# Confirm for addon removal.
	while :
		do
			read -p "Do you wish to proceed with the ${FULLAPPNAME} removal? [y/N]:" yn
			case ${yn} in
			[Yy]) break;;
			[Nn]) exit 0;;
			esac
		done
	echo "Proceeding..."

	# Check for working platform.
	if [ "${PRDPLATFORM}" = "x64-embedded" ]; then
		if [ -d "${USRLOCAL}/share/examples/${APPNAME}" ]; then
			rm -rf ${USRLOCAL}/share/examples/${APPNAME}
		fi
		if [ -f "${USRLOCAL}/man/man1/${APPNAME}.1.gz" ]; then
			rm -f ${USRLOCAL}/man/man1/${APPNAME}.1.gz
		fi
		if [ -f "${USRLOCAL}/bin/${APPNAME}" ]; then
			rm -f ${USRLOCAL}/bin/${APPNAME}
		fi
		if [ -f "${USRLOCAL}/bin/${APPNAME}" ]; then
			rm -f ${USRLOCAL}/bin/${APPNAME}
		fi
	elif [ "${PRDPLATFORM}" = "x64-full" ]; then
		if [ -f "${USRLOCAL}/bin/${APPNAME}" ]; then
			rm -f ${USRLOCAL}/bin/${APPNAME}
		fi
		pkg delete -y ${APPNAME}
	fi

	# Remove addon related files and folders only-
	# to protect any user-created custom files.
	FILES="conf download log jdupes-addon README.md postinit release_notes version jdupes-init"
	for file in ${FILES}; do
		if [ -f "${CWDIR}/${file}" ] || [ -d "${CWDIR}/${file}" ]; then
			rm -rf ${CWDIR}/${file}
		fi
	done
	
	if [ ! -f "${USRLOCAL}/sbin/${SCRIPTNAME}" ]; then
		rm ${USRLOCAL}/sbin/${SCRIPTNAME}
	fi

	echo "Done!"
	echo "Please manually remove the Jdupes Extension Command Script from the WebGUI."
	exit 0
}

get_versions()
{
	# Get jdupes-addon extension version.
	if [ -f "${CWDIR}/version" ]; then
		APPVERSION=$(cat ${CWDIR}/version)
	else
		APPVERSION="version file not found!"
	fi

	# Display product versions.
	echo -e "\njdupes version:" && ${USRLOCAL}/bin/jdupes -v
	echo -e "\nextension version:"
	echo "${FULLAPPNAME} ${APPVERSION}"
	exit 0
}

exec_status()
{
	# Log on startup success, else logging with faults.
	if [ $? -eq 0 ]; then
		MSG="script has been started successfully!"
		logger -t ${SCRIPTNAME} ${MSG}
	else
		MSG="script started with faults"
		logger -t ${SCRIPTNAME} ${MSG}
	fi
}

jdupes_init()
{
	# Check for system compatibility.
	if [ ! "${PLATFORM}" = "amd64" ]; then
		echo "Unsupported platform!"; exit 1
	fi 
	# Check for product compatibility.
	if [ ! "${PRDVERSION}" -ge "110" ]; then
		echo "Unsupported version!"; exit 1
	fi

	echo "Initializing ${APPNAME}..."

	# Function calls.
	platform_check
	product_check
	exec_status
}

# Run-time configuration.
runtime_config

while getopts ":ouxrvh" option; do
	case ${option} in
		[h]) echo "Usage: ${SCRIPTNAME} -[option]";
		echo "Options:"
		echo "        -u  Upgrade Jdupes/Add-On packages."
		echo "        -v  Display product version."
		echo "        -x  Reset ${FULLAPPNAME}."
		echo "        -r  Remove ${FULLAPPNAME}."
		echo "        -h  Display this help message."; exit 0;;
		[o]) OBI_INSTALL="ON";; # To prevent nested PHP-CGI call for installation with OBI.
		[u]) pkg_upgrade;;
		[x]) reset_install;;
		[r]) remove_addon;;
		[v]) get_versions;;
		[?]) echo "Invalid option, -h for usage."; exit 1;;
	esac
done
jdupes_init
